
> options(prompt = "R> ", continue = "+  ", width = 70, 
+     useFancyQuotes = FALSE)

> library("rpart")

> library("evtree")
Loading required package: partykit
Loading required package: grid

> library("lattice")

> data("BBBClub", package = "evtree")

> cache <- FALSE

> X1 <- rep(seq(0.25, 1.75, 0.5), each = 4)

> X2 <- rep(seq(0.25, 1.75, 0.5), 4)

> Y <- rep(1, 16)

> Y[(X1 < 1 & X2 < 1) | (X1 > 1 & X2 > 1)] <- 2

> Y <- factor(Y, labels = c("O", "X"))

> chess22 <- data.frame(Y, X1, X2)

> set.seed(1090)

> print(evtree(Y ~ ., data = chess22, minbucket = 1, 
+     minsplit = 2))

Model formula:
Y ~ X1 + X2

Fitted party:
[1] root
|   [2] X1 < 1.25
|   |   [3] X2 < 1.25: X (n = 4, err = 0.0%)
|   |   [4] X2 >= 1.25: O (n = 4, err = 0.0%)
|   [5] X1 >= 1.25
|   |   [6] X2 < 1.25: O (n = 4, err = 0.0%)
|   |   [7] X2 >= 1.25: X (n = 4, err = 0.0%)

Number of inner nodes:    3
Number of terminal nodes: 4

> par(mar = c(4, 4, 1, 1))

> plot(X2 ~ X1, data = chess22, xlim = c(0, 2), ylim = c(0, 
+     2), pch = c(1, 4)[Y], col = c("black", "slategray")[Y])

> if (cache & file.exists("BBBClub-trees.rda")) {
+     load("BBBClub-trees.rda")
+ } else {
+     data("BBBClub", package = "evtree")
+     library(" ..." ... [TRUNCATED] 
Loading required package: Formula

> plot(rp)

> plot(ct)

> plot(ev)

> ev

Model formula:
choice ~ gender + amount + freq + last + first + child + youth + 
    cook + diy + art

Fitted party:
[1] root
|   [2] first < 12
|   |   [3] art < 1: no (n = 250, err = 30.8%)
|   |   [4] art >= 1: yes (n = 69, err = 30.4%)
|   [5] first >= 12
|   |   [6] art < 2: no (n = 864, err = 21.8%)
|   |   [7] art >= 2: yes (n = 117, err = 25.6%)

Number of inner nodes:    3
Number of terminal nodes: 4

> plot(ev)

> mc <- function(obj) 1 - mean(predict(obj) == BBBClub$choice)

> evalfun <- function(obj) 2 * nrow(BBBClub) * mc(obj) + 
+     width(obj) * log(nrow(BBBClub))

> trees <- list(evtree = ev, rpart = rp, ctree = ct, 
+     rpart2 = rp2, ctree2 = ct2)

> round(sapply(trees, function(obj) c(misclassification = mc(obj), 
+     `evaluation function` = evalfun(obj))), digits = 3)
                     evtree   rpart   ctree  rpart2  ctree2
misclassification     0.243   0.238   0.248   0.262   0.255
evaluation function 660.680 655.851 694.191 701.510 692.680

> ftable(tab <- table(evtree = predict(ev), rpart = predict(rp), 
+     ctree = predict(ct), observed = BBBClub$choice))
                   observed  no yes
evtree rpart ctree                 
no     no    no             799 223
             yes             38  24
       yes   no               0   0
             yes             12  18
yes    no    no               0   0
             yes              0   0
       yes   no              21  19
             yes             30 116

> sapply(c("evtree", "rpart", "ctree"), function(nam) {
+     mt <- margin.table(tab, c(match(nam, names(dimnames(tab))), 
+         4))
+     c(abs = .... [TRUNCATED] 
     evtree   rpart   ctree
abs 186.000 216.000 238.000
rel  72.581  70.833  66.387

> rm(list = ls())

> for (i in Sys.glob("results/*.RData")) load(i)

> for (i in Sys.glob("results_j48/*.RData")) load(i)

> preprocess <- function(d, dname = "datasetname", isclassification = TRUE) {
+     if (isclassification) {
+         colnames(d) <- c("evtree", "rpar ..." ... [TRUNCATED] 

> r <- rbind(preprocess(d = cbind(rglass[, 1:3], rglass2[, 
+     3], rglass[, 4:6], rglass2[, 4]), dname = "Glass identification", 
+     isclassific .... [TRUNCATED] 

> r$ds <- factor(r$ds)

> r$samp <- factor(r$samp)

> r$dssamp <- r$ds:r$samp

> library("multcomp")
Loading required package: mvtnorm
Loading required package: survival
Loading required package: splines

> cstats <- function(alg = "evtree", value = "accuracy", 
+     data = r) {
+     dlab <- rev(unique(data$ds))
+     if (alg == "J48") {
+         dla .... [TRUNCATED] 

> acc_rpart <- cstats("rpart", "accuracy")

> com_rpart <- cstats("rpart", "complexity")

> acc_ctree <- cstats("ctree", "accuracy")

> com_ctree <- cstats("ctree", "complexity")

> acc_J48 <- cstats("J48", "accuracy")

> com_J48 <- cstats("J48", "complexity")

> ciplot <- function(x, xlim = NULL, main = "", xlab = "", 
+     ylab = TRUE) {
+     nam <- rownames(x)
+     k <- length(nam)
+     plot(x$mean, 1: .... [TRUNCATED] 

> par(mfrow = c(2, 2), oma = c(5, 10, 2, 0), mar = c(1, 
+     1, 2, 1))

> xlim1 <- range(cbind(acc_rpart, acc_ctree))

> xlim2 <- range(cbind(com_rpart, com_ctree))

> ciplot(acc_rpart, xlim = xlim1, main = "rpart", ylab = TRUE, 
+     xlab = "")

> ciplot(com_rpart, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "")

> ciplot(acc_ctree, xlim = xlim1, main = "ctree", ylab = TRUE, 
+     xlab = "relative difference in predictive accuracy (%)")

> ciplot(com_ctree, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "relative difference in complexity (%)")

> par(mfrow = c(1, 2), oma = c(5, 10, 2, 0), mar = c(1, 
+     1, 2, 1))

> xlim1 <- range(acc_J48)

> xlim2 <- range(com_J48)

> ciplot(acc_J48, xlim = xlim1, main = "J48", ylab = TRUE, 
+     xlab = "relative difference in predictive accuracy (%)")

> ciplot(com_J48, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "relative difference in complexity (%)")

> par(mfrow = c(2, 2), oma = c(5, 10, 2, 0), mar = c(1, 
+     1, 2, 1))

> xlim1 <- range(cbind(acc_rpart, acc_ctree))

> xlim2 <- range(cbind(com_rpart, com_ctree))

> ciplot(acc_rpart, xlim = xlim1, main = "rpart", ylab = TRUE, 
+     xlab = "")

> ciplot(com_rpart, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "")

> ciplot(acc_ctree, xlim = xlim1, main = "ctree", ylab = TRUE, 
+     xlab = "relative difference in predictive accuracy (%)")

> ciplot(com_ctree, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "relative difference in complexity (%)")

> par(mfrow = c(1, 2), oma = c(5, 10, 2, 0), mar = c(1, 
+     1, 2, 1))

> xlim1 <- range(acc_J48)

> xlim2 <- range(com_J48)

> ciplot(acc_J48, xlim = xlim1, main = "J48", ylab = TRUE, 
+     xlab = "relative difference in predictive accuracy (%)")

> ciplot(com_J48, xlim = xlim2, main = "", ylab = FALSE, 
+     xlab = "relative difference in complexity (%)")

> chessboard44 <- function(n = 4000, noisevariables = 6, 
+     noise = 0) {
+     chess44 <- array(0, c(n, noisevariables + 3))
+     for (i in 1:(no .... [TRUNCATED] 

> chess44 <- chessboard44(2000)

> plot(X2 ~ X1, data = chess44, xlim = c(0, 4), ylim = c(0, 
+     4), pch = c(1, 4)[Y], col = c("black", "slategray")[Y])

> library("xtable")

> load("./results/chessboard44_0.RData")

> load("./results/chessboard44_5.RData")

> load("./results/chessboard44_10.RData")

> load("./results_j48/chessboard44_0_j48.RData")

> load("./results_j48/chessboard44_5_j48.RData")

> load("./results_j48/chessboard44_10_j48.RData")

> chesstable_means <- as.data.frame(rbind(apply(rchessboard44_0, 
+     2, mean), apply(rchessboard44_5, 2, mean), apply(rchessboard44_10, 
+     2, m .... [TRUNCATED] 

> names(chesstable_means) <- c("\\code{evtree}", "\\code{rpart}", 
+     "\\code{ctree}", "\\code{evtree}", "\\code{rpart}", "\\code{ctree}")

> chesstable_means[, 1:3] <- format(chesstable_means[, 
+     1:3] * 100, digits = 1, nsmall = 1)

> chesstable_means[, 4:6] <- format(chesstable_means[, 
+     4:6], digits = 1, nsmall = 1)

> chesstable_sd <- as.data.frame(rbind(apply(rchessboard44_0, 
+     2, sd), apply(rchessboard44_5, 2, sd), apply(rchessboard44_10, 
+     2, sd)))

> names(chesstable_sd) <- c("\\code{evtree}", "\\code{rpart}", 
+     "\\code{ctree}", "\\code{evtree}", "\\code{rpart}", "\\code{ctree}")

> chesstable_sd[, 1:3] <- format(chesstable_sd[, 1:3] * 
+     100, digits = 1, nsmall = 1)

> chesstable_sd[, 4:6] <- format(chesstable_sd[, 4:6], 
+     digits = 1, nsmall = 1)

> chesstable_means2 <- as.data.frame(cbind(rbind(mean(rchessboard44_02[, 
+     3]), mean(rchessboard44_52[, 3]), mean(rchessboard44_102[, 
+     3])) .... [TRUNCATED] 

> chesstable_means2[, 1] <- format(chesstable_means2[, 
+     1] * 100, digits = 1, nsmall = 1)

> chesstable_means2[, 2] <- format(chesstable_means2[, 
+     2], digits = 1, nsmall = 1)

> names(chesstable_means2) <- c("\\code{J48}", "\\code{J48}")

> chesstable_sd2 <- as.data.frame(cbind(rbind(sd(rchessboard44_02[, 
+     3]), sd(rchessboard44_52[, 3]), sd(rchessboard44_102[, 3])), 
+     rbind(s .... [TRUNCATED] 

> chesstable_sd2[, 1] <- format(chesstable_sd2[, 1] * 
+     100, digits = 1, nsmall = 1)

> chesstable_sd2[, 2] <- format(chesstable_sd2[, 2], 
+     digits = 1, nsmall = 1)

> chesstable_means <- cbind(chesstable_means, chesstable_means2)

> chesstable_sd <- cbind(chesstable_sd, chesstable_sd2)

> chesstable_means <- chesstable_means[, c(1:3, 7, 4:6, 
+     8)]

> chesstable_sd <- chesstable_sd[, c(1:3, 7, 4:6, 8)]

> chesstable <- chesstable_means

> for (j in 1:ncol(chesstable_means)) {
+     for (i in 1:nrow(chesstable_means)) {
+         chesstable[i, j] <- paste(chesstable_means[i, j], "(", 
 .... [TRUNCATED] 

> chesstable <- cbind(rbind("0\\%", "5\\%", "10\\%"), 
+     chesstable)

> colnames(chesstable)[1] <- ""

> colnames(chesstable)[6:9] <- colnames(chesstable)[2:5]

> print(xtable(chesstable, caption = "Mean (and standard deviation) of accuracy and complexity for simulated $4 \\times 4$ chessboard examples.", 
+   .... [TRUNCATED] 
\begin{table}[ht]
\centering
\begin{tabular}{lllllllll}
  \toprule \multicolumn{1}{l}{Noise} & \multicolumn{4}{l}{Accuracy}  & \multicolumn{4}{l}{Complexity}\\ & \code{evtree} & \code{rpart} & \code{ctree} & \code{J48} & \code{evtree} & \code{rpart} & \code{ctree} & \code{J48} \\ 
  \midrule0\% & 93.2(7.4) & 69.1(18.3) & 49.9(1.1) & 50.0(1.1) & 14.4(2.2) & 16.6(8.2) & 1.1(0.3) & 1.2(1.1) \\ 
  5\% & 89.0(6.8) & 65.7(17.4) & 50.1(1.6) & 50.1(1.1) & 14.4(2.2) & 14.6(8.0) & 1.1(0.7) & 1.2(1.1) \\ 
  10\% & 84.5(5.6) & 62.8(14.1) & 50.1(1.3) & 50.2(3.6) & 14.6(2.0) & 14.3(7.3) & 1.1(0.4) & 1.5(4.8) \\ 
   \bottomrule\end{tabular}
\caption{Mean (and standard deviation) of accuracy and complexity for simulated $4 \times 4$ chessboard examples.} 
\label{tab:resultsChessboard}
\end{table}

> for (i in Sys.glob("results_parameter/*.RData")) load(i)

> panel.mean <- function(x, y, ...) {
+     x <- as.numeric(x)
+     x.unique <- unique(x)
+     for (X in x.unique) {
+         Y <- y[x == X]
+      .... [TRUNCATED] 

> preprocess_op <- function(d, dname = "datasetname") {
+     d <- as.data.frame(d)
+     colnames(d) <- c("c0m50sp50", "c20m40sp40", "c40m30sp30", 
+ .... [TRUNCATED] 

> preprocess_op_comp <- function(ntrees, colum) {
+     rt <- preprocess_op(d = rheart[, colum], dname = "Statlog heart")
+     rt <- rbind(rt, prepro .... [TRUNCATED] 

> r2 <- preprocess_op_comp("200 iterations", c(11:15))

> r2 <- rbind(r2, preprocess_op_comp("500 iterations", 
+     c(16:20)))

> r2 <- rbind(r2, preprocess_op_comp("10000 iterations", 
+     c(21:25)))

> sort_op <- function(x) {
+     x$ds <- relevel(x$ds, "Statlog heart")
+     x$ds <- relevel(x$ds, "Statlog German credit")
+     x$ds <- relevel(x$d .... [TRUNCATED] 

> r2$operatorprob <- factor(r2$operatorprob)

> r2$ds <- factor(r2$ds)

> r2$nIter <- factor(r2$nIter)

> r2 <- sort_op(r2)

> b1 <- bwplot(value ~ factor(operatorprob) | nIter + 
+     ds, data = as.data.frame(r2), horizontal = FALSE, ylab = list("Accuracy (\\%)", 
+     ce .... [TRUNCATED] 

> preprocess_ntrees <- function(d, dname = "datasetname") {
+     d <- as.data.frame(d)
+     colnames(d) <- c("25 trees", "50 trees", "100 trees", "2 ..." ... [TRUNCATED] 

> r <- preprocess_ntrees(d = rheart[, 1:5], dname = "Statlog heart")

> r <- rbind(r, preprocess_ntrees(d = rcredit[, 1:5], 
+     dname = "Statlog German credit"))

> r <- rbind(r, preprocess_ntrees(d = rspam[, 1:5], 
+     dname = "Spam"))

> r <- rbind(r, preprocess_ntrees(d = rchessboard44_5[, 
+     1:5], dname = "Chessboard 4x4 (5% noise)"))

> sort_ntrees <- function(x) {
+     x$ds <- relevel(x$ds, "Chessboard 4x4 (5% noise)")
+     x$ds <- relevel(x$ds, "Spam")
+     x$ds <- relevel(x$ds .... [TRUNCATED] 

> r$ntrees <- factor(r$ntrees)

> r$ds <- factor(r$ds)

> r <- sort_ntrees(r)

> par.settings = list(cex = 1.2)

> b2 <- bwplot(value ~ ntrees | ds, data = as.data.frame(r), 
+     horizontal = FALSE, ylab = list("Accuracy (%)", cex = 1.1), 
+     pch = "|", ylim .... [TRUNCATED] 

> trellis.par.set(theme = canonical.theme(color = FALSE))

> plot(b1)

> trellis.par.set(theme = canonical.theme(color = FALSE))

> plot(b2)

 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
 48.704   0.140  48.860 
